name: Vercel Production Pipeline — Auto-Skip & ETL Trigger

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - "**.md"
      - ".github/**"
  workflow_dispatch:
    inputs:
      force:
        description: "Force run even if no changes"
        required: false
        default: "false"
  schedule:
    - cron: "0 0 * * *"

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    env:
      NEXT_PUBLIC_BASE_URL: ${{ secrets.NEXT_PUBLIC_BASE_URL }}
      VERCEL_PROJECT_DOMAIN: ${{ secrets.VERCEL_PROJECT_DOMAIN }}
      CRON_SECRET: ${{ secrets.CRON_SECRET }}
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Default FORCE=false
        run: echo "FORCE=false" >> "$GITHUB_ENV"

      - name: Resolve FORCE (dispatch)
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.force == 'true' }}
        run: echo "FORCE=true" >> "$GITHUB_ENV"

      - name: Gate (schedule: commits in last 24h)
        id: gate_schedule
        if: ${{ github.event_name == 'schedule' }}
        shell: bash
        run: |
          set -euo pipefail
          if git log --since="24 hours ago" --pretty=format:%h | grep -q .; then
            echo "allow=true" >> "$GITHUB_OUTPUT"
          else
            echo "allow=false" >> "$GITHUB_OUTPUT"
            echo "### 💤 No new commits in last 24h — skipping" >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Detect changes (files)
        id: changes
        if: ${{ github.event_name != 'schedule' || steps.gate_schedule.outputs.allow == 'true' }}
        shell: bash
        run: |
          set -euo pipefail
          if ! git rev-parse --verify HEAD~1 >/dev/null 2>&1; then
            BASE="--root"
          else
            BASE="HEAD~1"
          fi
          if git diff --quiet ${BASE} HEAD -- . ':!**.md' ':!.github/**'; then
            echo "changed=false" >> "$GITHUB_OUTPUT"
            echo "### 💤 No file changes — skipping CI & Deploy" >> "$GITHUB_STEP_SUMMARY"
          else
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Mark start time
        if: ${{ (github.event_name != 'schedule' || steps.gate_schedule.outputs.allow == 'true') && (steps.changes.outputs.changed == 'true' || env.FORCE == 'true') }}
        run: echo "JOB_STARTED_AT=$(date +%s)" >> "$GITHUB_ENV"

      - name: Setup Node
        if: ${{ (github.event_name != 'schedule' || steps.gate_schedule.outputs.allow == 'true') && (steps.changes.outputs.changed == 'true' || env.FORCE == 'true') }}
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Cache Next build
        if: ${{ (github.event_name != 'schedule' || steps.gate_schedule.outputs.allow == 'true') && (steps.changes.outputs.changed == 'true' || env.FORCE == 'true') }}
        uses: actions/cache@v4
        with:
          path: .next/cache
          key: next-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.ts','**/*.tsx','next.config.*') }}
          restore-keys: |
            next-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}-

      - name: Install deps
        if: ${{ (github.event_name != 'schedule' || steps.gate_schedule.outputs.allow == 'true') && (steps.changes.outputs.changed == 'true' || env.FORCE == 'true') }}
        run: npm ci

      - name: Build
        if: ${{ (github.event_name != 'schedule' || steps.gate_schedule.outputs.allow == 'true') && (steps.changes.outputs.changed == 'true' || env.FORCE == 'true') }}
        shell: bash
        run: |
          set -euo pipefail
          npm run build

      - name: Deploy to Vercel (Production)
        if: ${{ (github.event_name != 'schedule' || steps.gate_schedule.outputs.allow == 'true') && (steps.changes.outputs.changed == 'true' || env.FORCE == 'true') }}
        shell: bash
        run: |
          set -euo pipefail
          npm i -g vercel@latest
          vercel pull --yes --environment=production --token="${{ env.VERCEL_TOKEN }}"
          vercel build --prod --token="${{ env.VERCEL_TOKEN }}"
          DEPLOY_LINE="$(vercel deploy --prebuilt --prod --yes --token="${{ env.VERCEL_TOKEN }}" | tail -n1)"
          case "$DEPLOY_LINE" in
            https://*) echo "DEPLOY_URL=$DEPLOY_LINE" >> "$GITHUB_ENV" ;;
            *) echo "Failed to capture deploy URL"; exit 1 ;;
          esac

      - name: Trigger ETL
        if: ${{ (github.event_name != 'schedule' || steps.gate_schedule.outputs.allow == 'true') && (steps.changes.outputs.changed == 'true' || env.FORCE == 'true') && env.CRON_SECRET != '' }}
        shell: bash
        run: |
          set -euo pipefail
          curl --retry 3 --retry-all-errors --fail \
            -X POST "https://${{ env.VERCEL_PROJECT_DOMAIN }}/api/etl" \
            -H "x-cron-secret: ${CRON_SECRET}"

      - name: Post-deploy Summary (success)
        if: ${{ (github.event_name != 'schedule' || steps.gate_schedule.outputs.allow == 'true') && (steps.changes.outputs.changed == 'true' || env.FORCE == 'true') && success() }}
        shell: bash
        run: |
          set -euo pipefail
          SHA=$(git rev-parse --short HEAD)
          MSG=$(git log -1 --pretty=%s)
          AUTHOR=$(git log -1 --pretty=format:'%an')
          END_TS=$(date +%s)
          DURATION=$(( END_TS - JOB_STARTED_AT ))
          RUN_URL="https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          {
            echo "### ✅ Deploy Succeeded"
            echo ""
            echo "- **Repo:** ${GITHUB_REPOSITORY}"
            echo "- **Branch:** ${GITHUB_REF_NAME}"
            echo "- **Commit:** ${SHA} — ${MSG} (by ${AUTHOR})"
            echo "- **Environment:** production"
            echo "- **URL:** ${DEPLOY_URL:-N/A}"
            echo "- **Duration:** ${DURATION}s"
            echo "- **Run:** ${RUN_URL}"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Post-run Summary (failure)
        if: ${{ failure() }}
        shell: bash
        run: |
          set -euo pipefail
          SHA=$(git rev-parse --short HEAD || echo "N/A")
          MSG=$(git log -1 --pretty=%s || echo "N/A")
          AUTHOR=$(git log -1 --pretty=format:'%an' || echo "N/A")
          END_TS=$(date +%s)
          DURATION=$(( END_TS - JOB_STARTED_AT ))
          RUN_URL="https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          {
            echo "### ❌ Deploy Failed"
            echo ""
            echo "- **Repo:** ${GITHUB_REPOSITORY}"
            echo "- **Branch:** ${GITHUB_REF_NAME}"
            echo "- **Commit:** ${SHA} — ${MSG} (by ${AUTHOR})"
            echo "- **Environment:** production"
            echo "- **URL:** ${DEPLOY_URL:-N/A}"
            echo "- **Duration:** ${DURATION}s"
            echo "- **Run:** ${RUN_URL}"
            echo ""
            echo "_Check the failed step logs above for details._"
          } >> "$GITHUB_STEP_SUMMARY"